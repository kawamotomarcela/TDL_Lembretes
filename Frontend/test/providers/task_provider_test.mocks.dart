// Mocks generated by Mockito 5.4.6 from annotations
// in grupotdl/test/providers/task_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:grupotdl/api/api_client.dart' as _i2;
import 'package:grupotdl/models/task_model.dart' as _i5;
import 'package:grupotdl/services/task_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiClient_0 extends _i1.SmartFake implements _i2.ApiClient {
  _FakeApiClient_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskService extends _i1.Mock implements _i3.TaskService {
  MockTaskService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiClient get api =>
      (super.noSuchMethod(
            Invocation.getter(#api),
            returnValue: _FakeApiClient_0(this, Invocation.getter(#api)),
          )
          as _i2.ApiClient);

  @override
  _i4.Future<List<_i5.TaskModel>> fetchTasks() =>
      (super.noSuchMethod(
            Invocation.method(#fetchTasks, []),
            returnValue: _i4.Future<List<_i5.TaskModel>>.value(
              <_i5.TaskModel>[],
            ),
          )
          as _i4.Future<List<_i5.TaskModel>>);

  @override
  _i4.Future<_i5.TaskModel?> createTask(_i5.TaskModel? task) =>
      (super.noSuchMethod(
            Invocation.method(#createTask, [task]),
            returnValue: _i4.Future<_i5.TaskModel?>.value(),
          )
          as _i4.Future<_i5.TaskModel?>);

  @override
  _i4.Future<bool> updateTask(_i5.TaskModel? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> deleteTask(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [id]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> toggleStatus(String? id, _i5.StatusTarefa? novoStatus) =>
      (super.noSuchMethod(
            Invocation.method(#toggleStatus, [id, novoStatus]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
